<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

include_once __DIR__ . '/Exceptions/HotelException.php';
include_once __DIR__ . '/Datatype/AvailabilityResp.php';

class SericeController {

    /**
     * API mode
     * 
     * @var
     */
    const SANDBOX_MODE = false;

    /**
     * Simulate fake response
     *
     * Value should be success Or fail
     *
     * @var
     */
    const FAKERESPONSE = 'success';

    /**
     * API HOTEL_API
     * 
     * @var
     */
    const HOTEL_API = "https://api.test.hotelbeds.com/hotel-api/1.0/";

    /**
     * API HOTEL_API
     * 
     * @var
     */
    const HOTEL_CONTENT_API = "https://api.test.hotelbeds.com/hotel-content-api/1.0/";

    /**
     * API public key
     * 
     * @var
     */
    private $public_key;

    /**
     * API secret key
     * 
     * @var
     */
    private $secret_key;


    public function __construct()
    {
        $this->public_key = "6e79tsxfyxxvp7qdkfac8kz3";
        $this->secret_key = "PMQyprXPmD";
    }

    private function getSignature()
    {
        // Signature is generated by SHA256 (Api-Key + Secret + Timestamp (in seconds))
        return hash("sha256", $this->public_key . $this->secret_key . time());
    }

    /**
     * Call Hotel Static Content Serice
     * 
     * @return mix
     */
    public function content($query = NULL)
    {
        try
        {	
            // Get cURL resource
            $curl = curl_init();
            // Set some options 
            curl_setopt_array($curl, array(
                CURLOPT_RETURNTRANSFER => 1,
                CURLOPT_URL => self::HOTEL_CONTENT_API . $query,
                CURLOPT_HTTPHEADER => [
                    'Accept:application/json', 
                    'Api-key:'.$this->public_key, 
                    'X-Signature:'.$this->getSignature()
                ]
            ));
            // Send the request & save response to $resp
            $resp = json_decode(curl_exec($curl));
            // Check HTTP status code
            if (!curl_errno($curl)) {
                switch ($http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE)) {
                    case 200:  # OK
                        return (object) array(
                            'status' => 'success',
                            'data' => $resp
                        );
                        break;
                    default:
                        return (object) array(
                            'status' => 'fail',
                            'data' => $resp,
                            'error' => [
                                'code' => 'Unexpected HTTP code: ', $http_code,
                                'message' => curl_getinfo($curl)
                            ]
                        );
                }
            }
            // Close request to clear up some resources
            curl_close($curl);
        } catch (Exception $ex) {
            return array(
                'status' => 'fail',
                'data' => $resp,
                'error' => [
                    'message' => sprintf("Error while sending request, reason: %s\n",$ex->getMessage())
                ]  
            );
        }
    }

    /**
     * Call Service HOTEL_API
     * 
     * @return mix
     */
    public function service($payload = [])
    {
        $service = $this->getServiceUri($payload);

        if(self::SANDBOX_MODE) 
        {
            if(self::FAKERESPONSE == 'success') {
                $availability_resp = __DIR__ . '/Responses/'.$service.'Success'.'.json';
            } else {
                $availability_resp = __DIR__ . '/Responses/'.$service.'Fail'.'.json';
            }

            $f = fopen($availability_resp, 'r');
            $resp = json_decode(fread($f, filesize($availability_resp)));
            fclose($f);
            if(property_exists($resp, 'error')) {
                throw new HotelException($resp->error->message, $resp);
            } else {
                return $this->parseResponse($payload, $resp);
            }
        }

        try
        {	
            // Get cURL resource
            $curl = curl_init();
            // Set some options 
            if($service == 'status') {
                curl_setopt_array($curl, array(
                    CURLOPT_RETURNTRANSFER => 1,
                    CURLOPT_URL => self::HOTEL_API . $service,
                    CURLOPT_HTTPHEADER => [
                        'Accept:application/json', 
                        'Api-key:'.$this->public_key, 
                        'X-Signature:'.$this->getSignature()
                    ]
                ));
            } else {
                curl_setopt_array($curl, array(
                    CURLOPT_RETURNTRANSFER => 1,
                    CURLOPT_URL => self::HOTEL_API . $service,
                    CURLOPT_HTTPHEADER => [
                        'Content-Type:application/json', 
                        'Accept:application/json', 
                        'Api-key:'.$this->public_key, 
                        'X-Signature:'.$this->getSignature()
                    ],
                    CURLOPT_POST => 1,
                    CURLOPT_POSTFIELDS => json_encode($payload)
                ));
            }
            // Send the request & save response to $resp
            $resp = json_decode(curl_exec($curl));
            if(property_exists($resp, 'error')) {
                $f = fopen(__DIR__ . '/Responses/'.$service.'Fail'.'.json', 'w');
                fwrite($f, curl_exec($curl));
                fclose($f);
                throw new HotelException($resp->error->message, $resp);
            } else {
                $f = fopen(__DIR__ . '/Responses/'.$service.'Success'.'.json', 'w');
                fwrite($f, curl_exec($curl));
                fclose($f);
                return $this->parseResponse($payload, $resp);
            }
            // Close request to clear up some resources
            curl_close($curl);
        } catch (Exception $ex) {
            return array(
                'status' => 'fail',
                'error' => [
                    'message' => sprintf("Error while sending request, reason: %s\n",$ex->getMessage())
                ]  
            );
        }
    }

    private function getServiceUri($payload)
    {
        if($payload instanceof AvailabilityReq) 
        {
            return 'hotels';
        }
    }

    private function parseResponse($payload, $resp)
    {
        if($payload instanceof AvailabilityReq)
        {
            $response = new AvailabilityResp($resp);
        }

        return $response;
    }
}